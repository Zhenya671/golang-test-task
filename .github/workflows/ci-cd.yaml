name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker
        run: |
          sudo apt-get update
          sudo apt-get -y install apt-transport-https ca-certificates curl gnupg lsb-release
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get -y install docker-ce docker-ce-cli containerd.io

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Build and run tests
        run: |
          echo "APP_PORT=${{ secrets.APP_PORT }}" > config/app.env
          echo "APP_HOSTNAME=${{ secrets.APP_HOSTNAME }}" >> config/app.env

          echo "TOKEN_KEY=${{ secrets.TOKEN_KEY }}" >> config/app.env

          echo "DB_HOSTNAME=${{ secrets.DB_HOSTNAME }}" >> config/app.env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> config/app.env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> config/app.env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> config/app.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> config/app.env
          echo "DB_SSLMODE=${{ secrets.DB_SSLMODE }}" >> config/app.env

          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> config/app.env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> config/app.env

          echo "DB_HOSTNAME=${{ secrets.DB_HOSTNAME }}" > config/db.env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> config/db.env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> config/db.env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> config/db.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> config/db.env
          echo "DB_SSLMODE=${{ secrets.DB_SSLMODE }}" >> config/db.env

          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> config/db.env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> config/db.env
  

          docker-compose up -d
          docker-compose exec -T rest_api go test ./...

      - name: Tear down Docker Compose
        run: docker-compose down
